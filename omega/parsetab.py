
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftis_equalnot_equalless_or_equalgreater_or_equalless_thangreater_thanandorleftplusminusleftstarslashand call cin close_brace close_bracket close_parenthesis comma cout do double double_number else elseif equal false for greater_or_equal greater_than identifier if in int int_number is_equal less_or_equal less_than main minus minus_minus not_equal open_brace open_bracket open_parenthesis or out plus plus_plus semicolon slash star string true while\n\t\tProgramFlow : VariablesDeclaration SubroutinesDeclaration Main\n\t\n\t\tMain : main open_brace Routine close_brace\n\t\n\t\tNumber : int_number action_insert_int_operand\n\t\t\t   | double_number action_insert_double_operand\n\t\n\t\tvariable : identifier dimensions\n\t\n\t\tdimensions : open_bracket variable close_bracket dimensions\n\t\t\t\t   | \n\t\t\n\t\tVariablesDeclaration : type RecVariableDeclaration semicolon VariablesDeclaration\n\t\t\t\t\t\t\t |\n\t\n\t\tRecVariableDeclaration  :\tvariable \n\t\t\t\t\t\t\t\t|\tvariable comma RecVariableDeclaration\n\t\t\t\t\t\t\t\t|   variable equal ArithmeticExpression\n\t\t\t\t\t\t\t\t|\tvariable equal ArithmeticExpression comma RecVariableDeclaration\n\t\n\t\ttype : int\t\n\t\t\t | double\n\t\n\tArithmeticExpression  : ArithmeticExpression plus action_insert_operator term action_generate_arith_quadruplet\n\t\t\t\t\t\t  | ArithmeticExpression minus action_insert_operator term action_generate_arith_quadruplet\n\t\t\t\t\t\t  | term\n\t\n    term\t\t: factor\n\t\t\t\t| term star action_insert_operator factor action_generate_arith_quadruplet\n\t\t\t\t| term slash action_insert_operator factor action_generate_arith_quadruplet\n\n\t\n    factor : Number\n\t\t   | variable action_insert_variable\n\t\t   | UnaryOperation\n\t\t   | open_parenthesis ArithmeticExpression close_parenthesis\n\t\n\t\tBooleanExpression : true\n\t\t\t\t\t\t  | false\n\t\t\t\t\t\t  | ArithmeticExpression\n\t\t\t\t\t\t  | ArithmeticExpression LogicOperator BooleanExpression\n\t\n\t\tAssignmentStatement : variable action_insert_variable equal ArithmeticExpression action_assignation\n\t\n\t\tUnaryOperation : plus_plus variable\n\t\t\t\t\t   | minus_minus variable\n\t\t\t\t\t   | variable plus_plus\n\t\t\t\t\t   | variable minus_minus\n\t\n\t\tLogicOperator : is_equal\n\t\t\t\t\t  |\tnot_equal\n\t\t\t\t\t  |\tless_or_equal\n\t\t\t\t\t  |\tgreater_or_equal\n\t\t\t\t\t  |\tless_than\n\t\t\t\t\t  |\tgreater_than\n\t\t\t\t\t  | and\n\t\t\t\t\t  | or\n\t\n\t\tifCondition : if open_parenthesis BooleanExpression close_parenthesis open_brace Routine close_brace elseIfCondition\n\t\n\t\telseIfCondition : elseif open_parenthesis BooleanExpression close_parenthesis open_brace Routine close_brace elseIfCondition\n\t\t\t\t\t\t| elseCondition\n\t\n\t\telseCondition : else open_brace Routine close_brace\n\t\t\t\t\t  |\n\t\n\t\twhileLoop : while open_parenthesis BooleanExpression close_parenthesis open_brace Routine close_brace\n\t\n\t\tdoWhileLoop : do open_brace Routine close_brace while open_parenthesis BooleanExpression close_parenthesis semicolon\n\t\n\t\tforLoop : for open_parenthesis RecVariableDeclaration semicolon BooleanExpression semicolon UpdateVariables close_parenthesis open_brace Routine close_brace\n\t\n\tUpdateVariables : AssignmentStatement\n\t\t\t\t\t| AssignmentStatement comma UpdateVariables\n\t\t\t\t\t| UnaryOperation\n\t\t\t\t\t| UnaryOperation comma UpdateVariables\n \t\n\t\tSubroutinesDeclaration : identifier open_brace Routine close_brace SubroutinesDeclaration\n\t\t\t\t\t\t\t   |\n\t\n\t\tRoutine : AssignmentStatement semicolon Routine\n\t\t\t\t| UnaryOperation semicolon Routine\n\t\t\t\t| ifCondition Routine\n\t\t\t\t| whileLoop Routine\n\t\t\t\t| doWhileLoop Routine\n\t\t\t\t| forLoop Routine\n\t\t\t\t| call identifier semicolon Routine\n\t\t\t\t| InOut Routine\n\t\t\t\t|\n\t\n\t\tInOut : cin in variable RecursiveIn semicolon\n\t\t\t  | cout out ArithmeticExpression RecursiveOut semicolon\n\t\t\t  | cout out string RecursiveOut semicolon\n\t\n\t\tRecursiveIn : in variable RecursiveIn\n\t\t\t\t\t|\n\t\n\t\tRecursiveOut : out ArithmeticExpression RecursiveOut\n\t\t\t\t\t | out string RecursiveOut\n\t\t\t\t\t |\n\taction_insert_variable :action_insert_int_operand :action_insert_double_operand :action_insert_operator : action_generate_arith_quadruplet :action_assignation :'
    
_lr_action_items = {'identifier':([0,2,3,4,5,13,14,15,16,18,19,23,24,25,26,27,28,30,31,38,46,51,52,53,65,66,67,68,69,70,72,73,74,75,76,85,86,98,99,100,101,107,108,109,110,111,112,113,114,115,118,119,121,129,131,135,138,139,146,147,151,152,157,159,163,164,165,166,167,168,175,176,177,179,180,],[-9,7,10,-14,-15,10,-9,10,10,10,10,10,10,10,10,58,10,10,10,-8,10,7,10,10,10,10,10,10,10,10,10,-77,-77,-77,-77,10,10,10,10,10,10,10,-35,-36,-37,-38,-39,-40,-41,-42,10,10,10,10,10,-66,-67,-68,10,10,-47,-48,-43,-45,10,10,10,10,-49,10,-46,-50,10,-47,-44,]),'main':([0,2,6,14,38,51,82,],[-9,-56,12,-9,-8,-56,-55,]),'int':([0,14,],[4,4,]),'double':([0,14,],[5,5,]),'$end':([1,11,81,],[0,-1,-2,]),'open_brace':([7,12,34,106,116,160,162,174,],[13,19,67,129,131,166,168,177,]),'semicolon':([8,9,10,17,21,22,39,40,41,42,43,44,45,47,48,58,61,62,63,64,71,78,79,80,88,89,90,93,94,95,96,97,102,103,105,120,122,123,124,125,126,127,128,130,133,134,136,137,140,141,142,143,148,149,150,161,],[14,-10,-7,-5,52,53,-11,-74,-12,-18,-19,-22,-24,-75,-76,85,-33,-34,-31,-32,-23,-3,-4,-7,-26,-27,-28,118,-70,-73,-73,-13,-25,-6,-79,135,138,139,-78,-78,-78,-78,-30,-29,147,-70,-73,-73,-16,-17,-20,-21,-69,-71,-72,167,]),'comma':([9,10,17,40,41,42,43,44,45,47,48,61,62,63,64,71,78,79,80,102,103,105,124,125,126,127,128,140,141,142,143,155,156,],[15,-7,-5,-74,72,-18,-19,-22,-24,-75,-76,-33,-34,-31,-32,-23,-3,-4,-7,-25,-6,-79,-78,-78,-78,-78,-30,-16,-17,-20,-21,163,164,]),'equal':([9,10,17,29,60,80,103,],[16,-7,-5,-74,86,-7,-6,]),'open_bracket':([10,80,],[18,18,]),'plus_plus':([10,13,16,17,19,23,24,25,26,28,29,40,46,52,53,65,66,67,70,73,74,75,76,80,85,86,98,99,100,101,103,107,108,109,110,111,112,113,114,115,118,121,129,131,135,138,139,146,147,151,152,157,159,163,164,165,166,167,168,175,176,177,179,180,],[-7,30,30,-5,30,30,30,30,30,30,61,61,30,30,30,30,30,30,30,-77,-77,-77,-77,-7,30,30,30,30,30,30,-6,30,-35,-36,-37,-38,-39,-40,-41,-42,30,30,30,30,-66,-67,-68,30,30,-47,-48,-43,-45,30,30,30,30,-49,30,-46,-50,30,-47,-44,]),'minus_minus':([10,13,16,17,19,23,24,25,26,28,29,40,46,52,53,65,66,67,70,73,74,75,76,80,85,86,98,99,100,101,103,107,108,109,110,111,112,113,114,115,118,121,129,131,135,138,139,146,147,151,152,157,159,163,164,165,166,167,168,175,176,177,179,180,],[-7,31,31,-5,31,31,31,31,31,31,62,62,31,31,31,31,31,31,31,-77,-77,-77,-77,-7,31,31,31,31,31,31,-6,31,-35,-36,-37,-38,-39,-40,-41,-42,31,31,31,31,-66,-67,-68,31,31,-47,-48,-43,-45,31,31,31,31,-49,31,-46,-50,31,-47,-44,]),'star':([10,17,40,42,43,44,45,47,48,61,62,63,64,71,78,79,80,102,103,124,125,126,127,142,143,],[-7,-5,-74,75,-19,-22,-24,-75,-76,-33,-34,-31,-32,-23,-3,-4,-7,-25,-6,75,75,-78,-78,-20,-21,]),'slash':([10,17,40,42,43,44,45,47,48,61,62,63,64,71,78,79,80,102,103,124,125,126,127,142,143,],[-7,-5,-74,76,-19,-22,-24,-75,-76,-33,-34,-31,-32,-23,-3,-4,-7,-25,-6,76,76,-78,-78,-20,-21,]),'plus':([10,17,40,41,42,43,44,45,47,48,61,62,63,64,71,77,78,79,80,90,95,102,103,105,124,125,126,127,136,140,141,142,143,],[-7,-5,-74,73,-18,-19,-22,-24,-75,-76,-33,-34,-31,-32,-23,73,-3,-4,-7,73,73,-25,-6,73,-78,-78,-78,-78,73,-16,-17,-20,-21,]),'minus':([10,17,40,41,42,43,44,45,47,48,61,62,63,64,71,77,78,79,80,90,95,102,103,105,124,125,126,127,136,140,141,142,143,],[-7,-5,-74,74,-18,-19,-22,-24,-75,-76,-33,-34,-31,-32,-23,74,-3,-4,-7,74,74,-25,-6,74,-78,-78,-78,-78,74,-16,-17,-20,-21,]),'close_bracket':([10,17,49,80,103,],[-7,-5,80,-7,-6,]),'close_parenthesis':([10,17,40,42,43,44,45,47,48,61,62,63,64,71,77,78,79,80,87,88,89,90,91,102,103,105,124,125,126,127,128,130,140,141,142,143,153,154,155,156,169,170,171,],[-7,-5,-74,-18,-19,-22,-24,-75,-76,-33,-34,-31,-32,-23,102,-3,-4,-7,106,-26,-27,-28,116,-25,-6,-79,-78,-78,-78,-78,-30,-29,-16,-17,-20,-21,161,162,-51,-53,-52,-54,174,]),'is_equal':([10,17,40,42,43,44,45,47,48,61,62,63,64,71,78,79,80,90,102,103,124,125,126,127,140,141,142,143,],[-7,-5,-74,-18,-19,-22,-24,-75,-76,-33,-34,-31,-32,-23,-3,-4,-7,108,-25,-6,-78,-78,-78,-78,-16,-17,-20,-21,]),'not_equal':([10,17,40,42,43,44,45,47,48,61,62,63,64,71,78,79,80,90,102,103,124,125,126,127,140,141,142,143,],[-7,-5,-74,-18,-19,-22,-24,-75,-76,-33,-34,-31,-32,-23,-3,-4,-7,109,-25,-6,-78,-78,-78,-78,-16,-17,-20,-21,]),'less_or_equal':([10,17,40,42,43,44,45,47,48,61,62,63,64,71,78,79,80,90,102,103,124,125,126,127,140,141,142,143,],[-7,-5,-74,-18,-19,-22,-24,-75,-76,-33,-34,-31,-32,-23,-3,-4,-7,110,-25,-6,-78,-78,-78,-78,-16,-17,-20,-21,]),'greater_or_equal':([10,17,40,42,43,44,45,47,48,61,62,63,64,71,78,79,80,90,102,103,124,125,126,127,140,141,142,143,],[-7,-5,-74,-18,-19,-22,-24,-75,-76,-33,-34,-31,-32,-23,-3,-4,-7,111,-25,-6,-78,-78,-78,-78,-16,-17,-20,-21,]),'less_than':([10,17,40,42,43,44,45,47,48,61,62,63,64,71,78,79,80,90,102,103,124,125,126,127,140,141,142,143,],[-7,-5,-74,-18,-19,-22,-24,-75,-76,-33,-34,-31,-32,-23,-3,-4,-7,112,-25,-6,-78,-78,-78,-78,-16,-17,-20,-21,]),'greater_than':([10,17,40,42,43,44,45,47,48,61,62,63,64,71,78,79,80,90,102,103,124,125,126,127,140,141,142,143,],[-7,-5,-74,-18,-19,-22,-24,-75,-76,-33,-34,-31,-32,-23,-3,-4,-7,113,-25,-6,-78,-78,-78,-78,-16,-17,-20,-21,]),'and':([10,17,40,42,43,44,45,47,48,61,62,63,64,71,78,79,80,90,102,103,124,125,126,127,140,141,142,143,],[-7,-5,-74,-18,-19,-22,-24,-75,-76,-33,-34,-31,-32,-23,-3,-4,-7,114,-25,-6,-78,-78,-78,-78,-16,-17,-20,-21,]),'or':([10,17,40,42,43,44,45,47,48,61,62,63,64,71,78,79,80,90,102,103,124,125,126,127,140,141,142,143,],[-7,-5,-74,-18,-19,-22,-24,-75,-76,-33,-34,-31,-32,-23,-3,-4,-7,115,-25,-6,-78,-78,-78,-78,-16,-17,-20,-21,]),'out':([10,17,37,40,42,43,44,45,47,48,61,62,63,64,71,78,79,80,95,96,102,103,124,125,126,127,136,137,140,141,142,143,],[-7,-5,70,-74,-18,-19,-22,-24,-75,-76,-33,-34,-31,-32,-23,-3,-4,-7,121,121,-25,-6,-78,-78,-78,-78,121,121,-16,-17,-20,-21,]),'in':([10,17,36,80,94,103,134,],[-7,-5,69,-7,119,-6,119,]),'call':([13,19,23,24,25,26,28,52,53,67,85,129,131,135,138,139,151,152,157,159,166,167,168,175,176,177,179,180,],[27,27,27,27,27,27,27,27,27,27,27,27,27,-66,-67,-68,-47,-48,-43,-45,27,-49,27,-46,-50,27,-47,-44,]),'close_brace':([13,19,20,23,24,25,26,28,50,52,53,54,55,56,57,59,67,83,84,85,92,104,129,131,135,138,139,144,145,151,152,157,159,166,167,168,172,173,175,176,177,178,179,180,],[-65,-65,51,-65,-65,-65,-65,-65,81,-65,-65,-59,-60,-61,-62,-64,-65,-57,-58,-65,117,-63,-65,-65,-66,-67,-68,151,152,-47,-48,-43,-45,-65,-49,-65,175,176,-46,-50,-65,179,-47,-44,]),'if':([13,19,23,24,25,26,28,52,53,67,85,129,131,135,138,139,151,152,157,159,166,167,168,175,176,177,179,180,],[32,32,32,32,32,32,32,32,32,32,32,32,32,-66,-67,-68,-47,-48,-43,-45,32,-49,32,-46,-50,32,-47,-44,]),'while':([13,19,23,24,25,26,28,52,53,67,85,117,129,131,135,138,139,151,152,157,159,166,167,168,175,176,177,179,180,],[33,33,33,33,33,33,33,33,33,33,33,132,33,33,-66,-67,-68,-47,-48,-43,-45,33,-49,33,-46,-50,33,-47,-44,]),'do':([13,19,23,24,25,26,28,52,53,67,85,129,131,135,138,139,151,152,157,159,166,167,168,175,176,177,179,180,],[34,34,34,34,34,34,34,34,34,34,34,34,34,-66,-67,-68,-47,-48,-43,-45,34,-49,34,-46,-50,34,-47,-44,]),'for':([13,19,23,24,25,26,28,52,53,67,85,129,131,135,138,139,151,152,157,159,166,167,168,175,176,177,179,180,],[35,35,35,35,35,35,35,35,35,35,35,35,35,-66,-67,-68,-47,-48,-43,-45,35,-49,35,-46,-50,35,-47,-44,]),'cin':([13,19,23,24,25,26,28,52,53,67,85,129,131,135,138,139,151,152,157,159,166,167,168,175,176,177,179,180,],[36,36,36,36,36,36,36,36,36,36,36,36,36,-66,-67,-68,-47,-48,-43,-45,36,-49,36,-46,-50,36,-47,-44,]),'cout':([13,19,23,24,25,26,28,52,53,67,85,129,131,135,138,139,151,152,157,159,166,167,168,175,176,177,179,180,],[37,37,37,37,37,37,37,37,37,37,37,37,37,-66,-67,-68,-47,-48,-43,-45,37,-49,37,-46,-50,37,-47,-44,]),'open_parenthesis':([16,32,33,35,46,65,66,70,73,74,75,76,86,98,99,100,101,107,108,109,110,111,112,113,114,115,118,121,132,146,158,165,],[46,65,66,68,46,46,46,46,-77,-77,-77,-77,46,46,46,46,46,46,-35,-36,-37,-38,-39,-40,-41,-42,46,46,146,46,165,46,]),'int_number':([16,46,65,66,70,73,74,75,76,86,98,99,100,101,107,108,109,110,111,112,113,114,115,118,121,146,165,],[47,47,47,47,47,-77,-77,-77,-77,47,47,47,47,47,47,-35,-36,-37,-38,-39,-40,-41,-42,47,47,47,47,]),'double_number':([16,46,65,66,70,73,74,75,76,86,98,99,100,101,107,108,109,110,111,112,113,114,115,118,121,146,165,],[48,48,48,48,48,-77,-77,-77,-77,48,48,48,48,48,48,-35,-36,-37,-38,-39,-40,-41,-42,48,48,48,48,]),'true':([65,66,107,108,109,110,111,112,113,114,115,118,146,165,],[88,88,88,-35,-36,-37,-38,-39,-40,-41,-42,88,88,88,]),'false':([65,66,107,108,109,110,111,112,113,114,115,118,146,165,],[89,89,89,-35,-36,-37,-38,-39,-40,-41,-42,89,89,89,]),'string':([70,121,],[96,137,]),'elseif':([151,179,],[158,158,]),'else':([151,179,],[160,160,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ProgramFlow':([0,],[1,]),'VariablesDeclaration':([0,14,],[2,38,]),'type':([0,14,],[3,3,]),'SubroutinesDeclaration':([2,51,],[6,82,]),'RecVariableDeclaration':([3,15,68,72,],[8,39,93,97,]),'variable':([3,13,15,16,18,19,23,24,25,26,28,30,31,46,52,53,65,66,67,68,69,70,72,85,86,98,99,100,101,107,118,119,121,129,131,146,147,163,164,165,166,168,177,],[9,29,9,40,49,29,29,29,29,29,29,63,64,40,29,29,40,40,29,9,94,40,9,29,40,40,40,40,40,40,40,134,40,29,29,40,29,29,29,40,29,29,29,]),'Main':([6,],[11,]),'dimensions':([10,80,],[17,103,]),'Routine':([13,19,23,24,25,26,28,52,53,67,85,129,131,166,168,177,],[20,50,54,55,56,57,59,83,84,92,104,144,145,172,173,178,]),'AssignmentStatement':([13,19,23,24,25,26,28,52,53,67,85,129,131,147,163,164,166,168,177,],[21,21,21,21,21,21,21,21,21,21,21,21,21,155,155,155,21,21,21,]),'UnaryOperation':([13,16,19,23,24,25,26,28,46,52,53,65,66,67,70,85,86,98,99,100,101,107,118,121,129,131,146,147,163,164,165,166,168,177,],[22,45,22,22,22,22,22,22,45,22,22,45,45,22,45,22,45,45,45,45,45,45,45,45,22,22,45,156,156,156,45,22,22,22,]),'ifCondition':([13,19,23,24,25,26,28,52,53,67,85,129,131,166,168,177,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'whileLoop':([13,19,23,24,25,26,28,52,53,67,85,129,131,166,168,177,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'doWhileLoop':([13,19,23,24,25,26,28,52,53,67,85,129,131,166,168,177,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'forLoop':([13,19,23,24,25,26,28,52,53,67,85,129,131,166,168,177,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'InOut':([13,19,23,24,25,26,28,52,53,67,85,129,131,166,168,177,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'ArithmeticExpression':([16,46,65,66,70,86,107,118,121,146,165,],[41,77,90,90,95,105,90,90,136,90,90,]),'term':([16,46,65,66,70,86,98,99,107,118,121,146,165,],[42,42,42,42,42,42,124,125,42,42,42,42,42,]),'factor':([16,46,65,66,70,86,98,99,100,101,107,118,121,146,165,],[43,43,43,43,43,43,43,43,126,127,43,43,43,43,43,]),'Number':([16,46,65,66,70,86,98,99,100,101,107,118,121,146,165,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'action_insert_variable':([29,40,],[60,71,]),'action_insert_int_operand':([47,],[78,]),'action_insert_double_operand':([48,],[79,]),'BooleanExpression':([65,66,107,118,146,165,],[87,91,130,133,153,171,]),'action_insert_operator':([73,74,75,76,],[98,99,100,101,]),'LogicOperator':([90,],[107,]),'RecursiveIn':([94,134,],[120,148,]),'RecursiveOut':([95,96,136,137,],[122,123,149,150,]),'action_assignation':([105,],[128,]),'action_generate_arith_quadruplet':([124,125,126,127,],[140,141,142,143,]),'UpdateVariables':([147,163,164,],[154,169,170,]),'elseIfCondition':([151,179,],[157,180,]),'elseCondition':([151,179,],[159,159,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ProgramFlow","S'",1,None,None,None),
  ('ProgramFlow -> VariablesDeclaration SubroutinesDeclaration Main','ProgramFlow',3,'p_ProgramFlow','omega.py',186),
  ('Main -> main open_brace Routine close_brace','Main',4,'p_Main','omega.py',198),
  ('Number -> int_number action_insert_int_operand','Number',2,'p_Number','omega.py',204),
  ('Number -> double_number action_insert_double_operand','Number',2,'p_Number','omega.py',205),
  ('variable -> identifier dimensions','variable',2,'p_variable','omega.py',210),
  ('dimensions -> open_bracket variable close_bracket dimensions','dimensions',4,'p_dimensions','omega.py',216),
  ('dimensions -> <empty>','dimensions',0,'p_dimensions','omega.py',217),
  ('VariablesDeclaration -> type RecVariableDeclaration semicolon VariablesDeclaration','VariablesDeclaration',4,'p_VariablesDeclaration','omega.py',222),
  ('VariablesDeclaration -> <empty>','VariablesDeclaration',0,'p_VariablesDeclaration','omega.py',223),
  ('RecVariableDeclaration -> variable','RecVariableDeclaration',1,'p_RecVariableDeclaration','omega.py',231),
  ('RecVariableDeclaration -> variable comma RecVariableDeclaration','RecVariableDeclaration',3,'p_RecVariableDeclaration','omega.py',232),
  ('RecVariableDeclaration -> variable equal ArithmeticExpression','RecVariableDeclaration',3,'p_RecVariableDeclaration','omega.py',233),
  ('RecVariableDeclaration -> variable equal ArithmeticExpression comma RecVariableDeclaration','RecVariableDeclaration',5,'p_RecVariableDeclaration','omega.py',234),
  ('type -> int','type',1,'p_type','omega.py',243),
  ('type -> double','type',1,'p_type','omega.py',244),
  ('ArithmeticExpression -> ArithmeticExpression plus action_insert_operator term action_generate_arith_quadruplet','ArithmeticExpression',5,'p_expression_plus_minus','omega.py',253),
  ('ArithmeticExpression -> ArithmeticExpression minus action_insert_operator term action_generate_arith_quadruplet','ArithmeticExpression',5,'p_expression_plus_minus','omega.py',254),
  ('ArithmeticExpression -> term','ArithmeticExpression',1,'p_expression_plus_minus','omega.py',255),
  ('term -> factor','term',1,'p_term_times_div','omega.py',260),
  ('term -> term star action_insert_operator factor action_generate_arith_quadruplet','term',5,'p_term_times_div','omega.py',261),
  ('term -> term slash action_insert_operator factor action_generate_arith_quadruplet','term',5,'p_term_times_div','omega.py',262),
  ('factor -> Number','factor',1,'p_factor','omega.py',267),
  ('factor -> variable action_insert_variable','factor',2,'p_factor','omega.py',268),
  ('factor -> UnaryOperation','factor',1,'p_factor','omega.py',269),
  ('factor -> open_parenthesis ArithmeticExpression close_parenthesis','factor',3,'p_factor','omega.py',270),
  ('BooleanExpression -> true','BooleanExpression',1,'p_BooleanExpression','omega.py',275),
  ('BooleanExpression -> false','BooleanExpression',1,'p_BooleanExpression','omega.py',276),
  ('BooleanExpression -> ArithmeticExpression','BooleanExpression',1,'p_BooleanExpression','omega.py',277),
  ('BooleanExpression -> ArithmeticExpression LogicOperator BooleanExpression','BooleanExpression',3,'p_BooleanExpression','omega.py',278),
  ('AssignmentStatement -> variable action_insert_variable equal ArithmeticExpression action_assignation','AssignmentStatement',5,'p_AssignmentStatement','omega.py',283),
  ('UnaryOperation -> plus_plus variable','UnaryOperation',2,'p_UnaryOperation','omega.py',288),
  ('UnaryOperation -> minus_minus variable','UnaryOperation',2,'p_UnaryOperation','omega.py',289),
  ('UnaryOperation -> variable plus_plus','UnaryOperation',2,'p_UnaryOperation','omega.py',290),
  ('UnaryOperation -> variable minus_minus','UnaryOperation',2,'p_UnaryOperation','omega.py',291),
  ('LogicOperator -> is_equal','LogicOperator',1,'p_LogicOperator','omega.py',296),
  ('LogicOperator -> not_equal','LogicOperator',1,'p_LogicOperator','omega.py',297),
  ('LogicOperator -> less_or_equal','LogicOperator',1,'p_LogicOperator','omega.py',298),
  ('LogicOperator -> greater_or_equal','LogicOperator',1,'p_LogicOperator','omega.py',299),
  ('LogicOperator -> less_than','LogicOperator',1,'p_LogicOperator','omega.py',300),
  ('LogicOperator -> greater_than','LogicOperator',1,'p_LogicOperator','omega.py',301),
  ('LogicOperator -> and','LogicOperator',1,'p_LogicOperator','omega.py',302),
  ('LogicOperator -> or','LogicOperator',1,'p_LogicOperator','omega.py',303),
  ('ifCondition -> if open_parenthesis BooleanExpression close_parenthesis open_brace Routine close_brace elseIfCondition','ifCondition',8,'p_ifCondition','omega.py',310),
  ('elseIfCondition -> elseif open_parenthesis BooleanExpression close_parenthesis open_brace Routine close_brace elseIfCondition','elseIfCondition',8,'p_elseIfCondition','omega.py',315),
  ('elseIfCondition -> elseCondition','elseIfCondition',1,'p_elseIfCondition','omega.py',316),
  ('elseCondition -> else open_brace Routine close_brace','elseCondition',4,'p_elseCondition','omega.py',321),
  ('elseCondition -> <empty>','elseCondition',0,'p_elseCondition','omega.py',322),
  ('whileLoop -> while open_parenthesis BooleanExpression close_parenthesis open_brace Routine close_brace','whileLoop',7,'p_whileLoop','omega.py',329),
  ('doWhileLoop -> do open_brace Routine close_brace while open_parenthesis BooleanExpression close_parenthesis semicolon','doWhileLoop',9,'p_doWhileLoop','omega.py',334),
  ('forLoop -> for open_parenthesis RecVariableDeclaration semicolon BooleanExpression semicolon UpdateVariables close_parenthesis open_brace Routine close_brace','forLoop',11,'p_forLoop','omega.py',339),
  ('UpdateVariables -> AssignmentStatement','UpdateVariables',1,'p_UpdateVariables','omega.py',343),
  ('UpdateVariables -> AssignmentStatement comma UpdateVariables','UpdateVariables',3,'p_UpdateVariables','omega.py',344),
  ('UpdateVariables -> UnaryOperation','UpdateVariables',1,'p_UpdateVariables','omega.py',345),
  ('UpdateVariables -> UnaryOperation comma UpdateVariables','UpdateVariables',3,'p_UpdateVariables','omega.py',346),
  ('SubroutinesDeclaration -> identifier open_brace Routine close_brace SubroutinesDeclaration','SubroutinesDeclaration',5,'p_SubroutinesDeclaration','omega.py',353),
  ('SubroutinesDeclaration -> <empty>','SubroutinesDeclaration',0,'p_SubroutinesDeclaration','omega.py',354),
  ('Routine -> AssignmentStatement semicolon Routine','Routine',3,'p_Routine','omega.py',359),
  ('Routine -> UnaryOperation semicolon Routine','Routine',3,'p_Routine','omega.py',360),
  ('Routine -> ifCondition Routine','Routine',2,'p_Routine','omega.py',361),
  ('Routine -> whileLoop Routine','Routine',2,'p_Routine','omega.py',362),
  ('Routine -> doWhileLoop Routine','Routine',2,'p_Routine','omega.py',363),
  ('Routine -> forLoop Routine','Routine',2,'p_Routine','omega.py',364),
  ('Routine -> call identifier semicolon Routine','Routine',4,'p_Routine','omega.py',365),
  ('Routine -> InOut Routine','Routine',2,'p_Routine','omega.py',366),
  ('Routine -> <empty>','Routine',0,'p_Routine','omega.py',367),
  ('InOut -> cin in variable RecursiveIn semicolon','InOut',5,'p_InOut','omega.py',374),
  ('InOut -> cout out ArithmeticExpression RecursiveOut semicolon','InOut',5,'p_InOut','omega.py',375),
  ('InOut -> cout out string RecursiveOut semicolon','InOut',5,'p_InOut','omega.py',376),
  ('RecursiveIn -> in variable RecursiveIn','RecursiveIn',3,'p_RecursiveIn','omega.py',381),
  ('RecursiveIn -> <empty>','RecursiveIn',0,'p_RecursiveIn','omega.py',382),
  ('RecursiveOut -> out ArithmeticExpression RecursiveOut','RecursiveOut',3,'p_RecursiveOut','omega.py',387),
  ('RecursiveOut -> out string RecursiveOut','RecursiveOut',3,'p_RecursiveOut','omega.py',388),
  ('RecursiveOut -> <empty>','RecursiveOut',0,'p_RecursiveOut','omega.py',389),
  ('action_insert_variable -> <empty>','action_insert_variable',0,'p_action_insert_variable','omega.py',393),
  ('action_insert_int_operand -> <empty>','action_insert_int_operand',0,'p_action_insert_int_operand','omega.py',400),
  ('action_insert_double_operand -> <empty>','action_insert_double_operand',0,'p_action_insert_double_operand','omega.py',405),
  ('action_insert_operator -> <empty>','action_insert_operator',0,'p_action_insert_operator','omega.py',410),
  ('action_generate_arith_quadruplet -> <empty>','action_generate_arith_quadruplet',0,'p_action_generate_arith_quadruplet','omega.py',414),
  ('action_assignation -> <empty>','action_assignation',0,'p_action_assignation','omega.py',426),
]
