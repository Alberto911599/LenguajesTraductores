
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftis_equalnot_equalless_or_equalgreater_or_equalless_thangreater_thanandorleftplusminusleftstarslashand call cin close_brace close_bracket close_parenthesis comma cout do double double_number else elseif equal false for greater_or_equal greater_than identifier if in int int_number is_equal less_or_equal less_than main minus minus_minus not_equal open_brace open_bracket open_parenthesis or out plus plus_plus semicolon slash star string true while\n\t\tProgramFlow : VariablesDeclaration SubroutinesDeclaration Main\n\t\n\t\tMain : main open_brace Routine close_brace\n\t\n\t\tNumber : int_number\n\t\t\t   | double_number\n\t\n\t\tvariable : identifier dimensions\n\t\n\t\tdimensions : open_bracket variable close_bracket dimensions\n\t\t\t\t   | \n\t\t\n\t\tVariablesDeclaration : type RecVariableDeclaration semicolon VariablesDeclaration\n\t\t\t\t\t\t\t |\n\t\n\t\tRecVariableDeclaration  :\tvariable \n\t\t\t\t\t\t\t\t|\tvariable comma RecVariableDeclaration\n\t\t\t\t\t\t\t\t|   variable equal ArithmeticExpression\n\t\t\t\t\t\t\t\t|\tvariable equal ArithmeticExpression comma RecVariableDeclaration\n\t\n\t\ttype : int\n\t\t\t | double\n\t\n\t\tArithmeticExpression : Number\n\t\t\t\t\t\t\t| variable\n\t\t\t\t\t\t\t| UnaryOperation\n\t\t\t\t\t\t\t| ArithmeticExpression plus ArithmeticExpression\n\t\t\t\t\t\t\t| ArithmeticExpression minus ArithmeticExpression\n\t\t\t\t\t\t\t| ArithmeticExpression star ArithmeticExpression\n\t\t\t\t\t\t\t| ArithmeticExpression slash ArithmeticExpression\n\t\t\t\t\t\t\t| open_parenthesis ArithmeticExpression close_parenthesis\n\t\n\t\tBooleanExpression : true\n\t\t\t\t\t\t  | false\n\t\t\t\t\t\t  | ArithmeticExpression\n\t\t\t\t\t\t  | ArithmeticExpression LogicOperator BooleanExpression\n\t\n\t\tAssignmentStatement : variable equal ArithmeticExpression\n\t\n\t\tUnaryOperation : plus_plus variable\n\t\t\t\t\t   | minus_minus variable\n\t\t\t\t\t   | variable plus_plus\n\t\t\t\t\t   | variable minus_minus\n\t\n\t\tLogicOperator : is_equal\n\t\t\t\t\t  |\tnot_equal\n\t\t\t\t\t  |\tless_or_equal\n\t\t\t\t\t  |\tgreater_or_equal\n\t\t\t\t\t  |\tless_than\n\t\t\t\t\t  |\tgreater_than\n\t\t\t\t\t  | and\n\t\t\t\t\t  | or\n\t\n\t\tifCondition : if open_parenthesis BooleanExpression close_parenthesis open_brace Routine close_brace elseIfCondition\n\t\n\t\telseIfCondition : elseif open_parenthesis BooleanExpression close_parenthesis open_brace Routine close_brace elseIfCondition\n\t\t\t\t\t\t| elseCondition\n\t\n\t\telseCondition : else open_brace Routine close_brace\n\t\t\t\t\t  |\n\t\n\t\twhileLoop : while open_parenthesis BooleanExpression close_parenthesis open_brace Routine close_brace\n\t\n\t\tdoWhileLoop : do open_brace Routine close_brace while open_parenthesis BooleanExpression close_parenthesis semicolon\n\t\n\t\tforLoop : for open_parenthesis RecVariableDeclaration semicolon BooleanExpression semicolon UpdateVariables close_parenthesis open_brace Routine close_brace\n\t\n\tUpdateVariables : AssignmentStatement\n\t\t\t\t\t| AssignmentStatement comma UpdateVariables\n\t\t\t\t\t| UnaryOperation\n\t\t\t\t\t| UnaryOperation comma UpdateVariables\n \t\n\t\tSubroutinesDeclaration : identifier open_brace Routine close_brace SubroutinesDeclaration\n\t\t\t\t\t\t\t   |\n\t\n\t\tRoutine : AssignmentStatement semicolon Routine\n\t\t\t\t| UnaryOperation semicolon Routine\n\t\t\t\t| ifCondition Routine\n\t\t\t\t| whileLoop Routine\n\t\t\t\t| doWhileLoop Routine\n\t\t\t\t| forLoop Routine\n\t\t\t\t| call identifier semicolon Routine\n\t\t\t\t| InOut Routine\n\t\t\t\t|\n\t\n\t\tInOut : cin in variable RecursiveIn semicolon\n\t\t\t  | cout out ArithmeticExpression RecursiveOut semicolon\n\t\t\t  | cout out string RecursiveOut semicolon\n\t\n\t\tRecursiveIn : in variable RecursiveIn\n\t\t\t\t\t|\n\t\n\t\tRecursiveOut : out ArithmeticExpression RecursiveOut\n\t\t\t\t\t | out string RecursiveOut\n\t\t\t\t\t |\n\t'
    
_lr_action_items = {'identifier':([0,2,3,4,5,13,14,15,16,18,19,23,24,25,26,27,28,30,31,38,44,49,50,51,58,63,64,65,66,67,68,69,70,71,72,73,80,101,102,103,104,105,106,107,108,109,112,113,115,118,120,124,127,128,131,132,136,137,142,144,148,149,150,151,152,153,160,161,162,164,165,],[-9,7,10,-14,-15,10,-9,10,10,10,10,10,10,10,10,56,10,10,10,-8,10,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-33,-34,-35,-36,-37,-38,-39,-40,10,10,10,10,10,-64,-65,-66,10,10,-45,-46,-41,-43,10,10,10,10,-47,10,-44,-48,10,-45,-42,]),'main':([0,2,6,14,38,49,77,],[-9,-54,12,-9,-8,-54,-53,]),'int':([0,14,],[4,4,]),'double':([0,14,],[5,5,]),'$end':([1,11,76,],[0,-1,-2,]),'open_brace':([7,12,34,100,110,145,147,159,],[13,19,65,118,120,151,153,162,]),'semicolon':([8,9,10,17,21,22,39,40,41,42,43,45,46,56,59,60,61,62,75,81,83,84,85,88,89,90,91,92,93,94,95,96,97,98,114,116,117,119,122,123,125,126,133,134,135,146,],[14,-10,-7,-5,50,51,-11,-17,-12,-16,-18,-3,-4,80,-31,-32,-29,-30,-7,-28,-24,-25,-26,112,-68,-71,-71,-13,-19,-20,-21,-22,-23,-6,124,127,128,-27,132,-68,-71,-71,-67,-69,-70,152,]),'comma':([9,10,17,40,41,42,43,45,46,59,60,61,62,75,81,93,94,95,96,97,98,140,141,],[15,-7,-5,-17,69,-16,-18,-3,-4,-31,-32,-29,-30,-7,-28,-19,-20,-21,-22,-23,-6,148,149,]),'equal':([9,10,17,29,75,98,],[16,-7,-5,58,-7,-6,]),'open_bracket':([10,75,],[18,18,]),'plus_plus':([10,13,16,17,19,23,24,25,26,28,29,40,44,50,51,58,63,64,65,68,70,71,72,73,75,80,98,101,102,103,104,105,106,107,108,109,112,115,118,120,124,127,128,131,132,136,137,142,144,148,149,150,151,152,153,160,161,162,164,165,],[-7,30,30,-5,30,30,30,30,30,30,59,59,30,30,30,30,30,30,30,30,30,30,30,30,-7,30,-6,30,-33,-34,-35,-36,-37,-38,-39,-40,30,30,30,30,-64,-65,-66,30,30,-45,-46,-41,-43,30,30,30,30,-47,30,-44,-48,30,-45,-42,]),'minus_minus':([10,13,16,17,19,23,24,25,26,28,29,40,44,50,51,58,63,64,65,68,70,71,72,73,75,80,98,101,102,103,104,105,106,107,108,109,112,115,118,120,124,127,128,131,132,136,137,142,144,148,149,150,151,152,153,160,161,162,164,165,],[-7,31,31,-5,31,31,31,31,31,31,60,60,31,31,31,31,31,31,31,31,31,31,31,31,-7,31,-6,31,-33,-34,-35,-36,-37,-38,-39,-40,31,31,31,31,-64,-65,-66,31,31,-45,-46,-41,-43,31,31,31,31,-47,31,-44,-48,31,-45,-42,]),'plus':([10,17,40,41,42,43,45,46,59,60,61,62,74,75,81,85,90,93,94,95,96,97,98,125,],[-7,-5,-17,70,-16,-18,-3,-4,-31,-32,-29,-30,70,-7,70,70,70,-19,-20,-21,-22,-23,-6,70,]),'minus':([10,17,40,41,42,43,45,46,59,60,61,62,74,75,81,85,90,93,94,95,96,97,98,125,],[-7,-5,-17,71,-16,-18,-3,-4,-31,-32,-29,-30,71,-7,71,71,71,-19,-20,-21,-22,-23,-6,71,]),'star':([10,17,40,41,42,43,45,46,59,60,61,62,74,75,81,85,90,93,94,95,96,97,98,125,],[-7,-5,-17,72,-16,-18,-3,-4,-31,-32,-29,-30,72,-7,72,72,72,72,72,-21,-22,-23,-6,72,]),'slash':([10,17,40,41,42,43,45,46,59,60,61,62,74,75,81,85,90,93,94,95,96,97,98,125,],[-7,-5,-17,73,-16,-18,-3,-4,-31,-32,-29,-30,73,-7,73,73,73,73,73,-21,-22,-23,-6,73,]),'close_bracket':([10,17,47,75,98,],[-7,-5,75,-7,-6,]),'close_parenthesis':([10,17,40,42,43,45,46,59,60,61,62,74,75,81,82,83,84,85,86,93,94,95,96,97,98,119,138,139,140,141,154,155,156,],[-7,-5,-17,-16,-18,-3,-4,-31,-32,-29,-30,97,-7,-28,100,-24,-25,-26,110,-19,-20,-21,-22,-23,-6,-27,146,147,-49,-51,-50,-52,159,]),'is_equal':([10,17,40,42,43,45,46,59,60,61,62,75,85,93,94,95,96,97,98,],[-7,-5,-17,-16,-18,-3,-4,-31,-32,-29,-30,-7,102,-19,-20,-21,-22,-23,-6,]),'not_equal':([10,17,40,42,43,45,46,59,60,61,62,75,85,93,94,95,96,97,98,],[-7,-5,-17,-16,-18,-3,-4,-31,-32,-29,-30,-7,103,-19,-20,-21,-22,-23,-6,]),'less_or_equal':([10,17,40,42,43,45,46,59,60,61,62,75,85,93,94,95,96,97,98,],[-7,-5,-17,-16,-18,-3,-4,-31,-32,-29,-30,-7,104,-19,-20,-21,-22,-23,-6,]),'greater_or_equal':([10,17,40,42,43,45,46,59,60,61,62,75,85,93,94,95,96,97,98,],[-7,-5,-17,-16,-18,-3,-4,-31,-32,-29,-30,-7,105,-19,-20,-21,-22,-23,-6,]),'less_than':([10,17,40,42,43,45,46,59,60,61,62,75,85,93,94,95,96,97,98,],[-7,-5,-17,-16,-18,-3,-4,-31,-32,-29,-30,-7,106,-19,-20,-21,-22,-23,-6,]),'greater_than':([10,17,40,42,43,45,46,59,60,61,62,75,85,93,94,95,96,97,98,],[-7,-5,-17,-16,-18,-3,-4,-31,-32,-29,-30,-7,107,-19,-20,-21,-22,-23,-6,]),'and':([10,17,40,42,43,45,46,59,60,61,62,75,85,93,94,95,96,97,98,],[-7,-5,-17,-16,-18,-3,-4,-31,-32,-29,-30,-7,108,-19,-20,-21,-22,-23,-6,]),'or':([10,17,40,42,43,45,46,59,60,61,62,75,85,93,94,95,96,97,98,],[-7,-5,-17,-16,-18,-3,-4,-31,-32,-29,-30,-7,109,-19,-20,-21,-22,-23,-6,]),'out':([10,17,37,40,42,43,45,46,59,60,61,62,75,90,91,93,94,95,96,97,98,125,126,],[-7,-5,68,-17,-16,-18,-3,-4,-31,-32,-29,-30,-7,115,115,-19,-20,-21,-22,-23,-6,115,115,]),'in':([10,17,36,75,89,98,123,],[-7,-5,67,-7,113,-6,113,]),'call':([13,19,23,24,25,26,28,50,51,65,80,118,120,124,127,128,136,137,142,144,151,152,153,160,161,162,164,165,],[27,27,27,27,27,27,27,27,27,27,27,27,27,-64,-65,-66,-45,-46,-41,-43,27,-47,27,-44,-48,27,-45,-42,]),'close_brace':([13,19,20,23,24,25,26,28,48,50,51,52,53,54,55,57,65,78,79,80,87,99,118,120,124,127,128,129,130,136,137,142,144,151,152,153,157,158,160,161,162,163,164,165,],[-63,-63,49,-63,-63,-63,-63,-63,76,-63,-63,-57,-58,-59,-60,-62,-63,-55,-56,-63,111,-61,-63,-63,-64,-65,-66,136,137,-45,-46,-41,-43,-63,-47,-63,160,161,-44,-48,-63,164,-45,-42,]),'if':([13,19,23,24,25,26,28,50,51,65,80,118,120,124,127,128,136,137,142,144,151,152,153,160,161,162,164,165,],[32,32,32,32,32,32,32,32,32,32,32,32,32,-64,-65,-66,-45,-46,-41,-43,32,-47,32,-44,-48,32,-45,-42,]),'while':([13,19,23,24,25,26,28,50,51,65,80,111,118,120,124,127,128,136,137,142,144,151,152,153,160,161,162,164,165,],[33,33,33,33,33,33,33,33,33,33,33,121,33,33,-64,-65,-66,-45,-46,-41,-43,33,-47,33,-44,-48,33,-45,-42,]),'do':([13,19,23,24,25,26,28,50,51,65,80,118,120,124,127,128,136,137,142,144,151,152,153,160,161,162,164,165,],[34,34,34,34,34,34,34,34,34,34,34,34,34,-64,-65,-66,-45,-46,-41,-43,34,-47,34,-44,-48,34,-45,-42,]),'for':([13,19,23,24,25,26,28,50,51,65,80,118,120,124,127,128,136,137,142,144,151,152,153,160,161,162,164,165,],[35,35,35,35,35,35,35,35,35,35,35,35,35,-64,-65,-66,-45,-46,-41,-43,35,-47,35,-44,-48,35,-45,-42,]),'cin':([13,19,23,24,25,26,28,50,51,65,80,118,120,124,127,128,136,137,142,144,151,152,153,160,161,162,164,165,],[36,36,36,36,36,36,36,36,36,36,36,36,36,-64,-65,-66,-45,-46,-41,-43,36,-47,36,-44,-48,36,-45,-42,]),'cout':([13,19,23,24,25,26,28,50,51,65,80,118,120,124,127,128,136,137,142,144,151,152,153,160,161,162,164,165,],[37,37,37,37,37,37,37,37,37,37,37,37,37,-64,-65,-66,-45,-46,-41,-43,37,-47,37,-44,-48,37,-45,-42,]),'open_parenthesis':([16,32,33,35,44,58,63,64,68,70,71,72,73,101,102,103,104,105,106,107,108,109,112,115,121,131,143,150,],[44,63,64,66,44,44,44,44,44,44,44,44,44,44,-33,-34,-35,-36,-37,-38,-39,-40,44,44,131,44,150,44,]),'int_number':([16,44,58,63,64,68,70,71,72,73,101,102,103,104,105,106,107,108,109,112,115,131,150,],[45,45,45,45,45,45,45,45,45,45,45,-33,-34,-35,-36,-37,-38,-39,-40,45,45,45,45,]),'double_number':([16,44,58,63,64,68,70,71,72,73,101,102,103,104,105,106,107,108,109,112,115,131,150,],[46,46,46,46,46,46,46,46,46,46,46,-33,-34,-35,-36,-37,-38,-39,-40,46,46,46,46,]),'true':([63,64,101,102,103,104,105,106,107,108,109,112,131,150,],[83,83,83,-33,-34,-35,-36,-37,-38,-39,-40,83,83,83,]),'false':([63,64,101,102,103,104,105,106,107,108,109,112,131,150,],[84,84,84,-33,-34,-35,-36,-37,-38,-39,-40,84,84,84,]),'string':([68,115,],[91,126,]),'elseif':([136,164,],[143,143,]),'else':([136,164,],[145,145,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ProgramFlow':([0,],[1,]),'VariablesDeclaration':([0,14,],[2,38,]),'type':([0,14,],[3,3,]),'SubroutinesDeclaration':([2,49,],[6,77,]),'RecVariableDeclaration':([3,15,66,69,],[8,39,88,92,]),'variable':([3,13,15,16,18,19,23,24,25,26,28,30,31,44,50,51,58,63,64,65,66,67,68,69,70,71,72,73,80,101,112,113,115,118,120,131,132,148,149,150,151,153,162,],[9,29,9,40,47,29,29,29,29,29,29,61,62,40,29,29,40,40,40,29,9,89,40,9,40,40,40,40,29,40,40,123,40,29,29,40,29,29,29,40,29,29,29,]),'Main':([6,],[11,]),'dimensions':([10,75,],[17,98,]),'Routine':([13,19,23,24,25,26,28,50,51,65,80,118,120,151,153,162,],[20,48,52,53,54,55,57,78,79,87,99,129,130,157,158,163,]),'AssignmentStatement':([13,19,23,24,25,26,28,50,51,65,80,118,120,132,148,149,151,153,162,],[21,21,21,21,21,21,21,21,21,21,21,21,21,140,140,140,21,21,21,]),'UnaryOperation':([13,16,19,23,24,25,26,28,44,50,51,58,63,64,65,68,70,71,72,73,80,101,112,115,118,120,131,132,148,149,150,151,153,162,],[22,43,22,22,22,22,22,22,43,22,22,43,43,43,22,43,43,43,43,43,22,43,43,43,22,22,43,141,141,141,43,22,22,22,]),'ifCondition':([13,19,23,24,25,26,28,50,51,65,80,118,120,151,153,162,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'whileLoop':([13,19,23,24,25,26,28,50,51,65,80,118,120,151,153,162,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'doWhileLoop':([13,19,23,24,25,26,28,50,51,65,80,118,120,151,153,162,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'forLoop':([13,19,23,24,25,26,28,50,51,65,80,118,120,151,153,162,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'InOut':([13,19,23,24,25,26,28,50,51,65,80,118,120,151,153,162,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'ArithmeticExpression':([16,44,58,63,64,68,70,71,72,73,101,112,115,131,150,],[41,74,81,85,85,90,93,94,95,96,85,85,125,85,85,]),'Number':([16,44,58,63,64,68,70,71,72,73,101,112,115,131,150,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'BooleanExpression':([63,64,101,112,131,150,],[82,86,119,122,138,156,]),'LogicOperator':([85,],[101,]),'RecursiveIn':([89,123,],[114,133,]),'RecursiveOut':([90,91,125,126,],[116,117,134,135,]),'UpdateVariables':([132,148,149,],[139,154,155,]),'elseIfCondition':([136,164,],[142,165,]),'elseCondition':([136,164,],[144,144,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ProgramFlow","S'",1,None,None,None),
  ('ProgramFlow -> VariablesDeclaration SubroutinesDeclaration Main','ProgramFlow',3,'p_ProgramFlow','omega.py',173),
  ('Main -> main open_brace Routine close_brace','Main',4,'p_Main','omega.py',179),
  ('Number -> int_number','Number',1,'p_Number','omega.py',185),
  ('Number -> double_number','Number',1,'p_Number','omega.py',186),
  ('variable -> identifier dimensions','variable',2,'p_variable','omega.py',191),
  ('dimensions -> open_bracket variable close_bracket dimensions','dimensions',4,'p_dimensions','omega.py',197),
  ('dimensions -> <empty>','dimensions',0,'p_dimensions','omega.py',198),
  ('VariablesDeclaration -> type RecVariableDeclaration semicolon VariablesDeclaration','VariablesDeclaration',4,'p_VariablesDeclaration','omega.py',203),
  ('VariablesDeclaration -> <empty>','VariablesDeclaration',0,'p_VariablesDeclaration','omega.py',204),
  ('RecVariableDeclaration -> variable','RecVariableDeclaration',1,'p_RecVariableDeclaration','omega.py',212),
  ('RecVariableDeclaration -> variable comma RecVariableDeclaration','RecVariableDeclaration',3,'p_RecVariableDeclaration','omega.py',213),
  ('RecVariableDeclaration -> variable equal ArithmeticExpression','RecVariableDeclaration',3,'p_RecVariableDeclaration','omega.py',214),
  ('RecVariableDeclaration -> variable equal ArithmeticExpression comma RecVariableDeclaration','RecVariableDeclaration',5,'p_RecVariableDeclaration','omega.py',215),
  ('type -> int','type',1,'p_type','omega.py',224),
  ('type -> double','type',1,'p_type','omega.py',225),
  ('ArithmeticExpression -> Number','ArithmeticExpression',1,'p_ArithmeticExpression','omega.py',233),
  ('ArithmeticExpression -> variable','ArithmeticExpression',1,'p_ArithmeticExpression','omega.py',234),
  ('ArithmeticExpression -> UnaryOperation','ArithmeticExpression',1,'p_ArithmeticExpression','omega.py',235),
  ('ArithmeticExpression -> ArithmeticExpression plus ArithmeticExpression','ArithmeticExpression',3,'p_ArithmeticExpression','omega.py',236),
  ('ArithmeticExpression -> ArithmeticExpression minus ArithmeticExpression','ArithmeticExpression',3,'p_ArithmeticExpression','omega.py',237),
  ('ArithmeticExpression -> ArithmeticExpression star ArithmeticExpression','ArithmeticExpression',3,'p_ArithmeticExpression','omega.py',238),
  ('ArithmeticExpression -> ArithmeticExpression slash ArithmeticExpression','ArithmeticExpression',3,'p_ArithmeticExpression','omega.py',239),
  ('ArithmeticExpression -> open_parenthesis ArithmeticExpression close_parenthesis','ArithmeticExpression',3,'p_ArithmeticExpression','omega.py',240),
  ('BooleanExpression -> true','BooleanExpression',1,'p_BooleanExpression','omega.py',245),
  ('BooleanExpression -> false','BooleanExpression',1,'p_BooleanExpression','omega.py',246),
  ('BooleanExpression -> ArithmeticExpression','BooleanExpression',1,'p_BooleanExpression','omega.py',247),
  ('BooleanExpression -> ArithmeticExpression LogicOperator BooleanExpression','BooleanExpression',3,'p_BooleanExpression','omega.py',248),
  ('AssignmentStatement -> variable equal ArithmeticExpression','AssignmentStatement',3,'p_AssignmentStatement','omega.py',253),
  ('UnaryOperation -> plus_plus variable','UnaryOperation',2,'p_UnaryOperation','omega.py',258),
  ('UnaryOperation -> minus_minus variable','UnaryOperation',2,'p_UnaryOperation','omega.py',259),
  ('UnaryOperation -> variable plus_plus','UnaryOperation',2,'p_UnaryOperation','omega.py',260),
  ('UnaryOperation -> variable minus_minus','UnaryOperation',2,'p_UnaryOperation','omega.py',261),
  ('LogicOperator -> is_equal','LogicOperator',1,'p_LogicOperator','omega.py',266),
  ('LogicOperator -> not_equal','LogicOperator',1,'p_LogicOperator','omega.py',267),
  ('LogicOperator -> less_or_equal','LogicOperator',1,'p_LogicOperator','omega.py',268),
  ('LogicOperator -> greater_or_equal','LogicOperator',1,'p_LogicOperator','omega.py',269),
  ('LogicOperator -> less_than','LogicOperator',1,'p_LogicOperator','omega.py',270),
  ('LogicOperator -> greater_than','LogicOperator',1,'p_LogicOperator','omega.py',271),
  ('LogicOperator -> and','LogicOperator',1,'p_LogicOperator','omega.py',272),
  ('LogicOperator -> or','LogicOperator',1,'p_LogicOperator','omega.py',273),
  ('ifCondition -> if open_parenthesis BooleanExpression close_parenthesis open_brace Routine close_brace elseIfCondition','ifCondition',8,'p_ifCondition','omega.py',280),
  ('elseIfCondition -> elseif open_parenthesis BooleanExpression close_parenthesis open_brace Routine close_brace elseIfCondition','elseIfCondition',8,'p_elseIfCondition','omega.py',285),
  ('elseIfCondition -> elseCondition','elseIfCondition',1,'p_elseIfCondition','omega.py',286),
  ('elseCondition -> else open_brace Routine close_brace','elseCondition',4,'p_elseCondition','omega.py',291),
  ('elseCondition -> <empty>','elseCondition',0,'p_elseCondition','omega.py',292),
  ('whileLoop -> while open_parenthesis BooleanExpression close_parenthesis open_brace Routine close_brace','whileLoop',7,'p_whileLoop','omega.py',299),
  ('doWhileLoop -> do open_brace Routine close_brace while open_parenthesis BooleanExpression close_parenthesis semicolon','doWhileLoop',9,'p_doWhileLoop','omega.py',304),
  ('forLoop -> for open_parenthesis RecVariableDeclaration semicolon BooleanExpression semicolon UpdateVariables close_parenthesis open_brace Routine close_brace','forLoop',11,'p_forLoop','omega.py',309),
  ('UpdateVariables -> AssignmentStatement','UpdateVariables',1,'p_UpdateVariables','omega.py',313),
  ('UpdateVariables -> AssignmentStatement comma UpdateVariables','UpdateVariables',3,'p_UpdateVariables','omega.py',314),
  ('UpdateVariables -> UnaryOperation','UpdateVariables',1,'p_UpdateVariables','omega.py',315),
  ('UpdateVariables -> UnaryOperation comma UpdateVariables','UpdateVariables',3,'p_UpdateVariables','omega.py',316),
  ('SubroutinesDeclaration -> identifier open_brace Routine close_brace SubroutinesDeclaration','SubroutinesDeclaration',5,'p_SubroutinesDeclaration','omega.py',323),
  ('SubroutinesDeclaration -> <empty>','SubroutinesDeclaration',0,'p_SubroutinesDeclaration','omega.py',324),
  ('Routine -> AssignmentStatement semicolon Routine','Routine',3,'p_Routine','omega.py',329),
  ('Routine -> UnaryOperation semicolon Routine','Routine',3,'p_Routine','omega.py',330),
  ('Routine -> ifCondition Routine','Routine',2,'p_Routine','omega.py',331),
  ('Routine -> whileLoop Routine','Routine',2,'p_Routine','omega.py',332),
  ('Routine -> doWhileLoop Routine','Routine',2,'p_Routine','omega.py',333),
  ('Routine -> forLoop Routine','Routine',2,'p_Routine','omega.py',334),
  ('Routine -> call identifier semicolon Routine','Routine',4,'p_Routine','omega.py',335),
  ('Routine -> InOut Routine','Routine',2,'p_Routine','omega.py',336),
  ('Routine -> <empty>','Routine',0,'p_Routine','omega.py',337),
  ('InOut -> cin in variable RecursiveIn semicolon','InOut',5,'p_InOut','omega.py',344),
  ('InOut -> cout out ArithmeticExpression RecursiveOut semicolon','InOut',5,'p_InOut','omega.py',345),
  ('InOut -> cout out string RecursiveOut semicolon','InOut',5,'p_InOut','omega.py',346),
  ('RecursiveIn -> in variable RecursiveIn','RecursiveIn',3,'p_RecursiveIn','omega.py',351),
  ('RecursiveIn -> <empty>','RecursiveIn',0,'p_RecursiveIn','omega.py',352),
  ('RecursiveOut -> out ArithmeticExpression RecursiveOut','RecursiveOut',3,'p_RecursiveOut','omega.py',357),
  ('RecursiveOut -> out string RecursiveOut','RecursiveOut',3,'p_RecursiveOut','omega.py',358),
  ('RecursiveOut -> <empty>','RecursiveOut',0,'p_RecursiveOut','omega.py',359),
]
