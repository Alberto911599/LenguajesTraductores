
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'Begin_Subroutines_Declaration Begin_Variables_Declaration End_Subroutines_Declaration End_Variables_Declaration call cin close_brace close_bracket close_parenthesis comma cout do double double_number else elseif equal for greater_or_equal greater_than identifier if in int int_number is_equal less_or_equal less_than minus minus_minus not_equal open_brace open_bracket open_parenthesis out plus plus_plus semicolon slash star string while\n\t\tProgramFlow : VariablesDeclaration SubroutinesDeclaration\n\t\n\t\tAssignmentStatement : identifier equal ArithmeticExpression\n\t\n\t\tVariablesDeclaration : Begin_Variables_Declaration SingleTypeVariableDeclaration End_Variables_Declaration\n\t\n\t\tSingleTypeVariableDeclaration : SimpleTypes SequenceOfIdentifiers semicolon SingleTypeVariableDeclaration\n\t\t\t\t\t\t\t\t\t  |\n\t\n\t\tSimpleTypes : int\n\t\t\t\t\t| double \n\t\n\t\tSequenceOfIdentifiers \t\t:\tidentifier \n\t\t\t\t\t\t\t\t\t|\tidentifier comma SequenceOfIdentifiers\n\t\t\t\t\t\t\t\t\t| \tidentifier open_bracket Number close_bracket\n\t\t\t\t\t\t\t\t\t| \tidentifier open_bracket Number close_bracket comma\n\t\t\t\t\t\t\t\t\t| \tidentifier open_bracket Number close_bracket open_bracket Number close_bracket\n\t\t\t\t\t\t\t\t\t| \tidentifier open_bracket Number close_bracket open_bracket Number close_bracket comma\n\t\t\t\t\t\t\t\t\t|\tAssignmentStatement\n\t\t\t\t\t\t\t\t\t|\tAssignmentStatement comma SequenceOfIdentifiers\n\t\n\t\tArithmeticExpression : Number\n\t\t\t\t   | UnaryOperation\n\t\t\t\t   | open_parenthesis ArithmeticExpression close_parenthesis\n\t\t\t\t   | open_parenthesis ArithmeticExpression close_parenthesis plus ArithmeticExpression\n\t\t\t\t   | open_parenthesis ArithmeticExpression close_parenthesis minus ArithmeticExpression\n\t\t\t\t   | open_parenthesis ArithmeticExpression close_parenthesis star ArithmeticExpression\n\t\t\t\t   | open_parenthesis ArithmeticExpression close_parenthesis slash ArithmeticExpression\n\t\t\t\t   | Number plus ArithmeticExpression\n\t\t\t\t   | Number minus ArithmeticExpression\n\t\t\t\t   | Number star ArithmeticExpression\n\t\t\t\t   | Number slash ArithmeticExpression\n\t\t\t\t   | UnaryOperation plus ArithmeticExpression\n\t\t\t\t   | UnaryOperation minus ArithmeticExpression\n\t\t\t\t   | UnaryOperation star ArithmeticExpression\n\t\t\t\t   | UnaryOperation slash ArithmeticExpression\n\t\n\t\tUnaryOperation : plus_plus identifier\n\t\t\t\t\t   | minus_minus identifier\n\t\t\t\t\t   | identifier plus_plus\n\t\t\t\t\t   | identifier minus_minus\n\t\n\t\tNumber : int_number\n\t\t\t   | double_number\n\t\t\t   | identifier\n\t\n\t\tBooleanExpression : ArithmeticExpression LogicOperator ArithmeticExpression\n\t\n\t\tLogicOperator : is_equal\n\t\t\t\t\t  |\tnot_equal\n\t\t\t\t\t  |\tless_or_equal\n\t\t\t\t\t  |\tgreater_or_equal\n\t\t\t\t\t  |\tless_than\n\t\t\t\t\t  |\tgreater_than\n\t\n\t\tifCondition : if open_parenthesis BooleanExpression close_parenthesis open_brace Routine close_brace elseIfCondition\n\t\n\t\telseIfCondition : elseif open_parenthesis BooleanExpression close_parenthesis open_brace Routine close_brace elseIfCondition\n\t\t\t\t\t\t| elseCondition\n\t\n\t\telseCondition : else open_brace Routine close_brace\n\t\t\t\t\t  |\n\t\n\t\twhileLoop : while open_parenthesis BooleanExpression close_parenthesis open_brace Routine close_brace\n\t\n\t\tdoWhileLoop : do open_brace Routine close_brace while open_parenthesis BooleanExpression close_parenthesis semicolon\n\t\n\t\tforLoop : for open_parenthesis SequenceOfIdentifiers semicolon BooleanExpression semicolon UpdateVariables close_parenthesis open_brace Routine close_brace\n\t\n\tUpdateVariables : AssignmentStatement\n\t\t\t\t\t| AssignmentStatement comma UpdateVariables\n\t\t\t\t\t| UnaryOperation\n\t\t\t\t\t| UnaryOperation comma UpdateVariables\n \t\n\t\tRoutine : AssignmentStatement semicolon Routine\n\t\t\t\t| UnaryOperation semicolon Routine\n\t\t\t\t| ifCondition Routine\n\t\t\t\t| whileLoop Routine\n\t\t\t\t| doWhileLoop Routine\n\t\t\t\t| forLoop Routine\n\t\t\t\t| call identifier Routine\n\t\t\t\t| InOut Routine\n\t\t\t\t|\n\t\n\t\tSubroutinesDeclaration : Begin_Subroutines_Declaration SingleSubroutine End_Subroutines_Declaration\n\t\n\t\tSingleSubroutine : identifier open_brace Routine close_brace SingleSubroutine\n\t\t\t\t\t\t |\n\t\n\t\tInOut : cin in identifier RecursiveIn semicolon\n\t\t\t  | cout out identifier RecursiveOut semicolon\n\t\n\t\tRecursiveIn : in identifier RecursiveIn\n\t\t\t\t\t|\n\t\n\t\tRecursiveOut : out identifier RecursiveOut\n\t\t\t\t\t|\n\t'
    
_lr_action_items = {'Begin_Variables_Declaration':([0,],[3,]),'$end':([1,4,16,],[0,-1,-66,]),'Begin_Subroutines_Declaration':([2,12,],[5,-3,]),'End_Variables_Declaration':([3,6,18,41,],[-5,12,-5,-4,]),'int':([3,18,],[8,8,]),'double':([3,18,],[9,9,]),'identifier':([5,7,8,9,17,19,20,21,22,27,28,29,30,31,32,33,34,51,55,56,57,62,66,67,68,69,70,71,73,74,75,76,77,78,79,80,93,105,106,107,108,109,110,111,114,115,117,120,121,122,123,124,126,130,132,140,141,145,146,151,153,157,158,159,160,161,162,169,170,171,173,174,],[11,14,-6,-7,23,14,43,47,14,23,23,23,23,62,23,64,65,47,11,23,23,23,47,47,23,14,91,92,47,47,47,47,47,47,47,47,43,47,-39,-40,-41,-42,-43,-44,47,129,131,47,47,47,47,23,23,-69,-70,47,23,-49,-50,-45,-47,23,23,47,23,-51,23,-48,-52,23,-49,-46,]),'End_Subroutines_Declaration':([5,10,55,82,],[-68,16,-68,-67,]),'open_brace':([11,37,104,112,154,156,168,],[17,68,124,126,160,162,171,]),'semicolon':([13,14,15,25,26,42,45,46,47,48,49,50,52,53,54,64,65,72,90,91,92,94,95,96,97,98,99,100,101,102,103,116,118,125,128,129,131,133,134,135,136,137,142,143,144,155,],[18,-8,-14,56,57,-9,-35,-36,-37,-2,-16,-17,-15,-33,-34,-31,-32,-10,114,-72,-74,-11,-23,-24,-25,-26,-27,-28,-29,-30,-18,130,132,-38,141,-72,-74,-12,-19,-20,-21,-22,-71,-73,-13,161,]),'comma':([14,15,45,46,47,48,49,50,53,54,64,65,72,95,96,97,98,99,100,101,102,103,133,134,135,136,137,149,150,],[19,22,-35,-36,-37,-2,-16,-17,-33,-34,-31,-32,94,-23,-24,-25,-26,-27,-28,-29,-30,-18,144,-19,-20,-21,-22,157,158,]),'open_bracket':([14,72,],[20,93,]),'equal':([14,23,],[21,21,]),'call':([17,27,28,29,30,32,56,57,62,68,124,126,130,132,145,146,151,153,160,161,162,169,170,171,173,174,],[31,31,31,31,31,31,31,31,31,31,31,31,-69,-70,-49,-50,-45,-47,31,-51,31,-48,-52,31,-49,-46,]),'close_brace':([17,24,27,28,29,30,32,56,57,58,59,60,61,62,63,68,83,84,85,89,124,126,130,132,138,139,145,146,151,153,160,161,162,166,167,169,170,171,172,173,174,],[-65,55,-65,-65,-65,-65,-65,-65,-65,-59,-60,-61,-62,-65,-64,-65,-57,-58,-63,113,-65,-65,-69,-70,145,146,-49,-50,-45,-47,-65,-51,-65,169,170,-48,-52,-65,173,-49,-46,]),'plus_plus':([17,21,23,27,28,29,30,32,47,51,56,57,62,66,67,68,73,74,75,76,77,78,79,80,105,106,107,108,109,110,111,114,120,121,122,123,124,126,130,132,140,141,145,146,151,153,157,158,159,160,161,162,169,170,171,173,174,],[33,33,53,33,33,33,33,33,53,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-39,-40,-41,-42,-43,-44,33,33,33,33,33,33,33,-69,-70,33,33,-49,-50,-45,-47,33,33,33,33,-51,33,-48,-52,33,-49,-46,]),'minus_minus':([17,21,23,27,28,29,30,32,47,51,56,57,62,66,67,68,73,74,75,76,77,78,79,80,105,106,107,108,109,110,111,114,120,121,122,123,124,126,130,132,140,141,145,146,151,153,157,158,159,160,161,162,169,170,171,173,174,],[34,34,54,34,34,34,34,34,54,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-39,-40,-41,-42,-43,-44,34,34,34,34,34,34,34,-69,-70,34,34,-49,-50,-45,-47,34,34,34,34,-51,34,-48,-52,34,-49,-46,]),'if':([17,27,28,29,30,32,56,57,62,68,124,126,130,132,145,146,151,153,160,161,162,169,170,171,173,174,],[35,35,35,35,35,35,35,35,35,35,35,35,-69,-70,-49,-50,-45,-47,35,-51,35,-48,-52,35,-49,-46,]),'while':([17,27,28,29,30,32,56,57,62,68,113,124,126,130,132,145,146,151,153,160,161,162,169,170,171,173,174,],[36,36,36,36,36,36,36,36,36,36,127,36,36,-69,-70,-49,-50,-45,-47,36,-51,36,-48,-52,36,-49,-46,]),'do':([17,27,28,29,30,32,56,57,62,68,124,126,130,132,145,146,151,153,160,161,162,169,170,171,173,174,],[37,37,37,37,37,37,37,37,37,37,37,37,-69,-70,-49,-50,-45,-47,37,-51,37,-48,-52,37,-49,-46,]),'for':([17,27,28,29,30,32,56,57,62,68,124,126,130,132,145,146,151,153,160,161,162,169,170,171,173,174,],[38,38,38,38,38,38,38,38,38,38,38,38,-69,-70,-49,-50,-45,-47,38,-51,38,-48,-52,38,-49,-46,]),'cin':([17,27,28,29,30,32,56,57,62,68,124,126,130,132,145,146,151,153,160,161,162,169,170,171,173,174,],[39,39,39,39,39,39,39,39,39,39,39,39,-69,-70,-49,-50,-45,-47,39,-51,39,-48,-52,39,-49,-46,]),'cout':([17,27,28,29,30,32,56,57,62,68,124,126,130,132,145,146,151,153,160,161,162,169,170,171,173,174,],[40,40,40,40,40,40,40,40,40,40,40,40,-69,-70,-49,-50,-45,-47,40,-51,40,-48,-52,40,-49,-46,]),'int_number':([20,21,51,66,67,73,74,75,76,77,78,79,80,93,105,106,107,108,109,110,111,114,120,121,122,123,140,159,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-39,-40,-41,-42,-43,-44,45,45,45,45,45,45,45,]),'double_number':([20,21,51,66,67,73,74,75,76,77,78,79,80,93,105,106,107,108,109,110,111,114,120,121,122,123,140,159,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-39,-40,-41,-42,-43,-44,46,46,46,46,46,46,46,]),'open_parenthesis':([21,35,36,38,51,66,67,73,74,75,76,77,78,79,80,105,106,107,108,109,110,111,114,120,121,122,123,127,140,152,159,],[51,66,67,69,51,51,51,51,51,51,51,51,51,51,51,51,-39,-40,-41,-42,-43,-44,51,51,51,51,51,140,51,159,51,]),'in':([39,91,129,],[70,115,115,]),'out':([40,92,131,],[71,117,117,]),'close_bracket':([43,44,45,46,119,],[-37,72,-35,-36,133,]),'plus':([45,46,47,49,50,53,54,64,65,103,],[-35,-36,-37,73,77,-33,-34,-31,-32,120,]),'minus':([45,46,47,49,50,53,54,64,65,103,],[-35,-36,-37,74,78,-33,-34,-31,-32,121,]),'star':([45,46,47,49,50,53,54,64,65,103,],[-35,-36,-37,75,79,-33,-34,-31,-32,122,]),'slash':([45,46,47,49,50,53,54,64,65,103,],[-35,-36,-37,76,80,-33,-34,-31,-32,123,]),'close_parenthesis':([45,46,47,48,49,50,53,54,64,65,81,86,88,95,96,97,98,99,100,101,102,103,125,134,135,136,137,147,148,149,150,163,164,165,],[-35,-36,-37,-2,-16,-17,-33,-34,-31,-32,103,104,112,-23,-24,-25,-26,-27,-28,-29,-30,-18,-38,-19,-20,-21,-22,155,156,-53,-55,-54,-56,168,]),'is_equal':([45,46,47,49,50,53,54,64,65,87,95,96,97,98,99,100,101,102,103,134,135,136,137,],[-35,-36,-37,-16,-17,-33,-34,-31,-32,106,-23,-24,-25,-26,-27,-28,-29,-30,-18,-19,-20,-21,-22,]),'not_equal':([45,46,47,49,50,53,54,64,65,87,95,96,97,98,99,100,101,102,103,134,135,136,137,],[-35,-36,-37,-16,-17,-33,-34,-31,-32,107,-23,-24,-25,-26,-27,-28,-29,-30,-18,-19,-20,-21,-22,]),'less_or_equal':([45,46,47,49,50,53,54,64,65,87,95,96,97,98,99,100,101,102,103,134,135,136,137,],[-35,-36,-37,-16,-17,-33,-34,-31,-32,108,-23,-24,-25,-26,-27,-28,-29,-30,-18,-19,-20,-21,-22,]),'greater_or_equal':([45,46,47,49,50,53,54,64,65,87,95,96,97,98,99,100,101,102,103,134,135,136,137,],[-35,-36,-37,-16,-17,-33,-34,-31,-32,109,-23,-24,-25,-26,-27,-28,-29,-30,-18,-19,-20,-21,-22,]),'less_than':([45,46,47,49,50,53,54,64,65,87,95,96,97,98,99,100,101,102,103,134,135,136,137,],[-35,-36,-37,-16,-17,-33,-34,-31,-32,110,-23,-24,-25,-26,-27,-28,-29,-30,-18,-19,-20,-21,-22,]),'greater_than':([45,46,47,49,50,53,54,64,65,87,95,96,97,98,99,100,101,102,103,134,135,136,137,],[-35,-36,-37,-16,-17,-33,-34,-31,-32,111,-23,-24,-25,-26,-27,-28,-29,-30,-18,-19,-20,-21,-22,]),'elseif':([145,173,],[152,152,]),'else':([145,173,],[154,154,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ProgramFlow':([0,],[1,]),'VariablesDeclaration':([0,],[2,]),'SubroutinesDeclaration':([2,],[4,]),'SingleTypeVariableDeclaration':([3,18,],[6,41,]),'SimpleTypes':([3,18,],[7,7,]),'SingleSubroutine':([5,55,],[10,82,]),'SequenceOfIdentifiers':([7,19,22,69,],[13,42,52,90,]),'AssignmentStatement':([7,17,19,22,27,28,29,30,32,56,57,62,68,69,124,126,141,157,158,160,162,171,],[15,25,15,15,25,25,25,25,25,25,25,25,25,15,25,25,149,149,149,25,25,25,]),'Routine':([17,27,28,29,30,32,56,57,62,68,124,126,160,162,171,],[24,58,59,60,61,63,83,84,85,89,138,139,166,167,172,]),'UnaryOperation':([17,21,27,28,29,30,32,51,56,57,62,66,67,68,73,74,75,76,77,78,79,80,105,114,120,121,122,123,124,126,140,141,157,158,159,160,162,171,],[26,50,26,26,26,26,26,50,26,26,26,50,50,26,50,50,50,50,50,50,50,50,50,50,50,50,50,50,26,26,50,150,150,150,50,26,26,26,]),'ifCondition':([17,27,28,29,30,32,56,57,62,68,124,126,160,162,171,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'whileLoop':([17,27,28,29,30,32,56,57,62,68,124,126,160,162,171,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'doWhileLoop':([17,27,28,29,30,32,56,57,62,68,124,126,160,162,171,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'forLoop':([17,27,28,29,30,32,56,57,62,68,124,126,160,162,171,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'InOut':([17,27,28,29,30,32,56,57,62,68,124,126,160,162,171,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'Number':([20,21,51,66,67,73,74,75,76,77,78,79,80,93,105,114,120,121,122,123,140,159,],[44,49,49,49,49,49,49,49,49,49,49,49,49,119,49,49,49,49,49,49,49,49,]),'ArithmeticExpression':([21,51,66,67,73,74,75,76,77,78,79,80,105,114,120,121,122,123,140,159,],[48,81,87,87,95,96,97,98,99,100,101,102,125,87,134,135,136,137,87,87,]),'BooleanExpression':([66,67,114,140,159,],[86,88,128,147,165,]),'LogicOperator':([87,],[105,]),'RecursiveIn':([91,129,],[116,142,]),'RecursiveOut':([92,131,],[118,143,]),'UpdateVariables':([141,157,158,],[148,163,164,]),'elseIfCondition':([145,173,],[151,174,]),'elseCondition':([145,173,],[153,153,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ProgramFlow","S'",1,None,None,None),
  ('ProgramFlow -> VariablesDeclaration SubroutinesDeclaration','ProgramFlow',2,'p_ProgramFlow','omega.py',145),
  ('AssignmentStatement -> identifier equal ArithmeticExpression','AssignmentStatement',3,'p_AssignmentStatement','omega.py',151),
  ('VariablesDeclaration -> Begin_Variables_Declaration SingleTypeVariableDeclaration End_Variables_Declaration','VariablesDeclaration',3,'p_VariablesDeclaration','omega.py',156),
  ('SingleTypeVariableDeclaration -> SimpleTypes SequenceOfIdentifiers semicolon SingleTypeVariableDeclaration','SingleTypeVariableDeclaration',4,'p_SingleTypeVariableDeclaration','omega.py',161),
  ('SingleTypeVariableDeclaration -> <empty>','SingleTypeVariableDeclaration',0,'p_SingleTypeVariableDeclaration','omega.py',162),
  ('SimpleTypes -> int','SimpleTypes',1,'p_SimpleTypes','omega.py',167),
  ('SimpleTypes -> double','SimpleTypes',1,'p_SimpleTypes','omega.py',168),
  ('SequenceOfIdentifiers -> identifier','SequenceOfIdentifiers',1,'p_SequenceOfIdentifiers','omega.py',173),
  ('SequenceOfIdentifiers -> identifier comma SequenceOfIdentifiers','SequenceOfIdentifiers',3,'p_SequenceOfIdentifiers','omega.py',174),
  ('SequenceOfIdentifiers -> identifier open_bracket Number close_bracket','SequenceOfIdentifiers',4,'p_SequenceOfIdentifiers','omega.py',175),
  ('SequenceOfIdentifiers -> identifier open_bracket Number close_bracket comma','SequenceOfIdentifiers',5,'p_SequenceOfIdentifiers','omega.py',176),
  ('SequenceOfIdentifiers -> identifier open_bracket Number close_bracket open_bracket Number close_bracket','SequenceOfIdentifiers',7,'p_SequenceOfIdentifiers','omega.py',177),
  ('SequenceOfIdentifiers -> identifier open_bracket Number close_bracket open_bracket Number close_bracket comma','SequenceOfIdentifiers',8,'p_SequenceOfIdentifiers','omega.py',178),
  ('SequenceOfIdentifiers -> AssignmentStatement','SequenceOfIdentifiers',1,'p_SequenceOfIdentifiers','omega.py',179),
  ('SequenceOfIdentifiers -> AssignmentStatement comma SequenceOfIdentifiers','SequenceOfIdentifiers',3,'p_SequenceOfIdentifiers','omega.py',180),
  ('ArithmeticExpression -> Number','ArithmeticExpression',1,'p_ArithmeticExpression','omega.py',185),
  ('ArithmeticExpression -> UnaryOperation','ArithmeticExpression',1,'p_ArithmeticExpression','omega.py',186),
  ('ArithmeticExpression -> open_parenthesis ArithmeticExpression close_parenthesis','ArithmeticExpression',3,'p_ArithmeticExpression','omega.py',187),
  ('ArithmeticExpression -> open_parenthesis ArithmeticExpression close_parenthesis plus ArithmeticExpression','ArithmeticExpression',5,'p_ArithmeticExpression','omega.py',188),
  ('ArithmeticExpression -> open_parenthesis ArithmeticExpression close_parenthesis minus ArithmeticExpression','ArithmeticExpression',5,'p_ArithmeticExpression','omega.py',189),
  ('ArithmeticExpression -> open_parenthesis ArithmeticExpression close_parenthesis star ArithmeticExpression','ArithmeticExpression',5,'p_ArithmeticExpression','omega.py',190),
  ('ArithmeticExpression -> open_parenthesis ArithmeticExpression close_parenthesis slash ArithmeticExpression','ArithmeticExpression',5,'p_ArithmeticExpression','omega.py',191),
  ('ArithmeticExpression -> Number plus ArithmeticExpression','ArithmeticExpression',3,'p_ArithmeticExpression','omega.py',192),
  ('ArithmeticExpression -> Number minus ArithmeticExpression','ArithmeticExpression',3,'p_ArithmeticExpression','omega.py',193),
  ('ArithmeticExpression -> Number star ArithmeticExpression','ArithmeticExpression',3,'p_ArithmeticExpression','omega.py',194),
  ('ArithmeticExpression -> Number slash ArithmeticExpression','ArithmeticExpression',3,'p_ArithmeticExpression','omega.py',195),
  ('ArithmeticExpression -> UnaryOperation plus ArithmeticExpression','ArithmeticExpression',3,'p_ArithmeticExpression','omega.py',196),
  ('ArithmeticExpression -> UnaryOperation minus ArithmeticExpression','ArithmeticExpression',3,'p_ArithmeticExpression','omega.py',197),
  ('ArithmeticExpression -> UnaryOperation star ArithmeticExpression','ArithmeticExpression',3,'p_ArithmeticExpression','omega.py',198),
  ('ArithmeticExpression -> UnaryOperation slash ArithmeticExpression','ArithmeticExpression',3,'p_ArithmeticExpression','omega.py',199),
  ('UnaryOperation -> plus_plus identifier','UnaryOperation',2,'p_UnaryOperation','omega.py',204),
  ('UnaryOperation -> minus_minus identifier','UnaryOperation',2,'p_UnaryOperation','omega.py',205),
  ('UnaryOperation -> identifier plus_plus','UnaryOperation',2,'p_UnaryOperation','omega.py',206),
  ('UnaryOperation -> identifier minus_minus','UnaryOperation',2,'p_UnaryOperation','omega.py',207),
  ('Number -> int_number','Number',1,'p_Number','omega.py',212),
  ('Number -> double_number','Number',1,'p_Number','omega.py',213),
  ('Number -> identifier','Number',1,'p_Number','omega.py',214),
  ('BooleanExpression -> ArithmeticExpression LogicOperator ArithmeticExpression','BooleanExpression',3,'p_BooleanExpression','omega.py',219),
  ('LogicOperator -> is_equal','LogicOperator',1,'p_LogicOperator','omega.py',224),
  ('LogicOperator -> not_equal','LogicOperator',1,'p_LogicOperator','omega.py',225),
  ('LogicOperator -> less_or_equal','LogicOperator',1,'p_LogicOperator','omega.py',226),
  ('LogicOperator -> greater_or_equal','LogicOperator',1,'p_LogicOperator','omega.py',227),
  ('LogicOperator -> less_than','LogicOperator',1,'p_LogicOperator','omega.py',228),
  ('LogicOperator -> greater_than','LogicOperator',1,'p_LogicOperator','omega.py',229),
  ('ifCondition -> if open_parenthesis BooleanExpression close_parenthesis open_brace Routine close_brace elseIfCondition','ifCondition',8,'p_ifCondition','omega.py',234),
  ('elseIfCondition -> elseif open_parenthesis BooleanExpression close_parenthesis open_brace Routine close_brace elseIfCondition','elseIfCondition',8,'p_elseIfCondition','omega.py',239),
  ('elseIfCondition -> elseCondition','elseIfCondition',1,'p_elseIfCondition','omega.py',240),
  ('elseCondition -> else open_brace Routine close_brace','elseCondition',4,'p_elseCondition','omega.py',245),
  ('elseCondition -> <empty>','elseCondition',0,'p_elseCondition','omega.py',246),
  ('whileLoop -> while open_parenthesis BooleanExpression close_parenthesis open_brace Routine close_brace','whileLoop',7,'p_whileLoop','omega.py',251),
  ('doWhileLoop -> do open_brace Routine close_brace while open_parenthesis BooleanExpression close_parenthesis semicolon','doWhileLoop',9,'p_doWhileLoop','omega.py',256),
  ('forLoop -> for open_parenthesis SequenceOfIdentifiers semicolon BooleanExpression semicolon UpdateVariables close_parenthesis open_brace Routine close_brace','forLoop',11,'p_forLoop','omega.py',261),
  ('UpdateVariables -> AssignmentStatement','UpdateVariables',1,'p_UpdateVariables','omega.py',265),
  ('UpdateVariables -> AssignmentStatement comma UpdateVariables','UpdateVariables',3,'p_UpdateVariables','omega.py',266),
  ('UpdateVariables -> UnaryOperation','UpdateVariables',1,'p_UpdateVariables','omega.py',267),
  ('UpdateVariables -> UnaryOperation comma UpdateVariables','UpdateVariables',3,'p_UpdateVariables','omega.py',268),
  ('Routine -> AssignmentStatement semicolon Routine','Routine',3,'p_Routine','omega.py',273),
  ('Routine -> UnaryOperation semicolon Routine','Routine',3,'p_Routine','omega.py',274),
  ('Routine -> ifCondition Routine','Routine',2,'p_Routine','omega.py',275),
  ('Routine -> whileLoop Routine','Routine',2,'p_Routine','omega.py',276),
  ('Routine -> doWhileLoop Routine','Routine',2,'p_Routine','omega.py',277),
  ('Routine -> forLoop Routine','Routine',2,'p_Routine','omega.py',278),
  ('Routine -> call identifier Routine','Routine',3,'p_Routine','omega.py',279),
  ('Routine -> InOut Routine','Routine',2,'p_Routine','omega.py',280),
  ('Routine -> <empty>','Routine',0,'p_Routine','omega.py',281),
  ('SubroutinesDeclaration -> Begin_Subroutines_Declaration SingleSubroutine End_Subroutines_Declaration','SubroutinesDeclaration',3,'p_SubroutinesDeclaration','omega.py',286),
  ('SingleSubroutine -> identifier open_brace Routine close_brace SingleSubroutine','SingleSubroutine',5,'p_SingleSubroutine','omega.py',291),
  ('SingleSubroutine -> <empty>','SingleSubroutine',0,'p_SingleSubroutine','omega.py',292),
  ('InOut -> cin in identifier RecursiveIn semicolon','InOut',5,'p_InOut','omega.py',297),
  ('InOut -> cout out identifier RecursiveOut semicolon','InOut',5,'p_InOut','omega.py',298),
  ('RecursiveIn -> in identifier RecursiveIn','RecursiveIn',3,'p_RecursiveIn','omega.py',303),
  ('RecursiveIn -> <empty>','RecursiveIn',0,'p_RecursiveIn','omega.py',304),
  ('RecursiveOut -> out identifier RecursiveOut','RecursiveOut',3,'p_RecursiveOut','omega.py',309),
  ('RecursiveOut -> <empty>','RecursiveOut',0,'p_RecursiveOut','omega.py',310),
]
